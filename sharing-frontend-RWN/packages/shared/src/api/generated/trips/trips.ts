/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Travel Planner API
 * API documentation for the Travel Planner application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Error,
  PutApiTripsIdBody,
  Trip,
  TripInput
} from '.././schemas';





/**
 * @summary Get all trips for the authenticated user
 */
export const getApiTrips = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Trip[]>> => {
    
    
    return axios.get(
      `/api/trips`,options
    );
  }


export const getGetApiTripsQueryKey = () => {
    return [`/api/trips`] as const;
    }

    
export const getGetApiTripsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTrips>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTrips>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTripsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTrips>>> = ({ signal }) => getApiTrips({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTrips>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTripsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTrips>>>
export type GetApiTripsQueryError = AxiosError<unknown>


/**
 * @summary Get all trips for the authenticated user
 */

export function useGetApiTrips<TData = Awaited<ReturnType<typeof getApiTrips>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTrips>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTripsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new trip
 */
export const postApiTrips = (
    tripInput: TripInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Trip>> => {
    
    
    return axios.post(
      `/api/trips`,
      tripInput,options
    );
  }



export const getPostApiTripsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTrips>>, TError,{data: TripInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTrips>>, TError,{data: TripInput}, TContext> => {
    
const mutationKey = ['postApiTrips'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTrips>>, {data: TripInput}> = (props) => {
          const {data} = props ?? {};

          return  postApiTrips(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTripsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTrips>>>
    export type PostApiTripsMutationBody = TripInput
    export type PostApiTripsMutationError = AxiosError<unknown>

    /**
 * @summary Create a new trip
 */
export const usePostApiTrips = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTrips>>, TError,{data: TripInput}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiTrips>>,
        TError,
        {data: TripInput},
        TContext
      > => {

      const mutationOptions = getPostApiTripsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Get a trip by ID
 */
export const getApiTripsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Trip>> => {
    
    
    return axios.get(
      `/api/trips/${id}`,options
    );
  }


export const getGetApiTripsIdQueryKey = (id: number,) => {
    return [`/api/trips/${id}`] as const;
    }

    
export const getGetApiTripsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTripsId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTripsId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTripsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTripsId>>> = ({ signal }) => getApiTripsId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTripsId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiTripsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTripsId>>>
export type GetApiTripsIdQueryError = AxiosError<Error>


/**
 * @summary Get a trip by ID
 */

export function useGetApiTripsId<TData = Awaited<ReturnType<typeof getApiTripsId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiTripsId>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiTripsIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a trip
 */
export const putApiTripsId = (
    id: number,
    putApiTripsIdBody: PutApiTripsIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Trip>> => {
    
    
    return axios.put(
      `/api/trips/${id}`,
      putApiTripsIdBody,options
    );
  }



export const getPutApiTripsIdMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTripsId>>, TError,{id: number;data: PutApiTripsIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiTripsId>>, TError,{id: number;data: PutApiTripsIdBody}, TContext> => {
    
const mutationKey = ['putApiTripsId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiTripsId>>, {id: number;data: PutApiTripsIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiTripsId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiTripsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiTripsId>>>
    export type PutApiTripsIdMutationBody = PutApiTripsIdBody
    export type PutApiTripsIdMutationError = AxiosError<Error>

    /**
 * @summary Update a trip
 */
export const usePutApiTripsId = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTripsId>>, TError,{id: number;data: PutApiTripsIdBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiTripsId>>,
        TError,
        {id: number;data: PutApiTripsIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiTripsIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete a trip
 */
export const deleteApiTripsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/trips/${id}`,options
    );
  }



export const getDeleteApiTripsIdMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTripsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTripsId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiTripsId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTripsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiTripsId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTripsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTripsId>>>
    
    export type DeleteApiTripsIdMutationError = AxiosError<Error>

    /**
 * @summary Delete a trip
 */
export const useDeleteApiTripsId = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTripsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTripsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiTripsIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    