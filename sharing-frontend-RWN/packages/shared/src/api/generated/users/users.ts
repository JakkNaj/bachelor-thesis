/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Travel Planner API
 * API documentation for the Travel Planner application
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Error,
  UserResponse
} from '.././schemas';





/**
 * @summary Get user profile
 */
export const getApiUsersProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResponse>> => {
    
    
    return axios.get(
      `/api/users/profile`,options
    );
  }


export const getGetApiUsersProfileQueryKey = () => {
    return [`/api/users/profile`] as const;
    }

    
export const getGetApiUsersProfileQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersProfile>>, TError = AxiosError<Error>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersProfile>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersProfile>>> = ({ signal }) => getApiUsersProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiUsersProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersProfile>>>
export type GetApiUsersProfileQueryError = AxiosError<Error>


/**
 * @summary Get user profile
 */

export function useGetApiUsersProfile<TData = Awaited<ReturnType<typeof getApiUsersProfile>>, TError = AxiosError<Error>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUsersProfile>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiUsersProfileQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



