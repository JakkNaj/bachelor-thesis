/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Travel Planner API
 * API documentation for the Travel Planner application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Activity,
  ActivityInput,
  Error,
  PutApiActivitiesIdBody
} from '.././schemas';





/**
 * @summary Add an activity to a trip
 */
export const postApiActivitiesTripTripId = (
    tripId: number,
    activityInput: ActivityInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Activity>> => {
    
    
    return axios.post(
      `/api/activities/trip/${tripId}`,
      activityInput,options
    );
  }



export const getPostApiActivitiesTripTripIdMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiActivitiesTripTripId>>, TError,{tripId: number;data: ActivityInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiActivitiesTripTripId>>, TError,{tripId: number;data: ActivityInput}, TContext> => {
    
const mutationKey = ['postApiActivitiesTripTripId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiActivitiesTripTripId>>, {tripId: number;data: ActivityInput}> = (props) => {
          const {tripId,data} = props ?? {};

          return  postApiActivitiesTripTripId(tripId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiActivitiesTripTripIdMutationResult = NonNullable<Awaited<ReturnType<typeof postApiActivitiesTripTripId>>>
    export type PostApiActivitiesTripTripIdMutationBody = ActivityInput
    export type PostApiActivitiesTripTripIdMutationError = AxiosError<Error>

    /**
 * @summary Add an activity to a trip
 */
export const usePostApiActivitiesTripTripId = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiActivitiesTripTripId>>, TError,{tripId: number;data: ActivityInput}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiActivitiesTripTripId>>,
        TError,
        {tripId: number;data: ActivityInput},
        TContext
      > => {

      const mutationOptions = getPostApiActivitiesTripTripIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Update an activity
 */
export const putApiActivitiesId = (
    id: number,
    putApiActivitiesIdBody: PutApiActivitiesIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Activity>> => {
    
    
    return axios.put(
      `/api/activities/${id}`,
      putApiActivitiesIdBody,options
    );
  }



export const getPutApiActivitiesIdMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiActivitiesId>>, TError,{id: number;data: PutApiActivitiesIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiActivitiesId>>, TError,{id: number;data: PutApiActivitiesIdBody}, TContext> => {
    
const mutationKey = ['putApiActivitiesId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiActivitiesId>>, {id: number;data: PutApiActivitiesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiActivitiesId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiActivitiesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiActivitiesId>>>
    export type PutApiActivitiesIdMutationBody = PutApiActivitiesIdBody
    export type PutApiActivitiesIdMutationError = AxiosError<Error>

    /**
 * @summary Update an activity
 */
export const usePutApiActivitiesId = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiActivitiesId>>, TError,{id: number;data: PutApiActivitiesIdBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putApiActivitiesId>>,
        TError,
        {id: number;data: PutApiActivitiesIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiActivitiesIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Delete an activity
 */
export const deleteApiActivitiesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/activities/${id}`,options
    );
  }



export const getDeleteApiActivitiesIdMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiActivitiesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiActivitiesId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiActivitiesId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiActivitiesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiActivitiesId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiActivitiesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiActivitiesId>>>
    
    export type DeleteApiActivitiesIdMutationError = AxiosError<Error>

    /**
 * @summary Delete an activity
 */
export const useDeleteApiActivitiesId = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiActivitiesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiActivitiesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiActivitiesIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    